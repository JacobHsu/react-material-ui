{"version":3,"sources":["SimpleList.js","SimpleDialogs.js","SimpleAppBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","ListItemLink","props","ListItem","button","component","SimpleList","classes","className","List","aria-label","ListItemIcon","ListItemText","primary","Divider","href","emails","avatar","blue","color","SimpleDialog","onClose","selectedValue","open","handleListItemClick","value","Dialog","aria-labelledby","DialogTitle","id","map","email","onClick","key","ListItemAvatar","Avatar","autoFocus","SimpleDialogDemo","React","useState","setOpen","setSelectedValue","Typography","variant","Button","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","AppBar","position","Toolbar","IconButton","edge","App","Fragment","path","SimpleDialogs","SimpleAppBar","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66f1319b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction ListItemLink(props) {\r\n  return <ListItem button component=\"a\" {...props} />;\r\n}\r\n\r\nexport default function SimpleList() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <InboxIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Inbox\" />\r\n        </ListItem>\r\n        <ListItem button>\r\n          <ListItemIcon>\r\n            <DraftsIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Drafts\" />\r\n        </ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n        <ListItem button>\r\n          <ListItemText primary=\"Trash\" />\r\n        </ListItem>\r\n        <ListItemLink href=\"#simple-list\">\r\n          <ListItemText primary=\"Spam\" />\r\n        </ListItemLink>\r\n      </List>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { blue } from '@material-ui/core/colors';\r\n\r\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\r\nconst useStyles = makeStyles({\r\n  avatar: {\r\n    backgroundColor: blue[100],\r\n    color: blue[600],\r\n  },\r\n});\r\n\r\nfunction SimpleDialog(props) {\r\n  const classes = useStyles();\r\n  const { onClose, selectedValue, open } = props;\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  const handleListItemClick = value => {\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n      <DialogTitle id=\"simple-dialog-title\">Set backup account</DialogTitle>\r\n      <List>\r\n        {emails.map(email => (\r\n          <ListItem button onClick={() => handleListItemClick(email)} key={email}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.avatar}>\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={email} />\r\n          </ListItem>\r\n        ))}\r\n\r\n        <ListItem autoFocus button onClick={() => handleListItemClick('addAccount')}>\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <AddIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary=\"add account\" />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  selectedValue: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function SimpleDialogDemo() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedValue, setSelectedValue] = React.useState(emails[1]);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = value => {\r\n    setOpen(false);\r\n    setSelectedValue(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography variant=\"subtitle1\">Selected: {selectedValue}</Typography>\r\n      <br />\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open simple dialog\r\n      </Button>\r\n      <SimpleDialog selectedValue={selectedValue} open={open} onClose={handleClose} />\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            News\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\n\nimport { BrowserRouter as Router,Route} from 'react-router-dom';\nimport './App.css';\n\nimport SimpleList from './SimpleList';\nimport SimpleDialogs from './SimpleDialogs';\nimport SimpleAppBar from './SimpleAppBar';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router >\n        <Route path=\"/\" component={SimpleList} />\n        <Route path=\"/SimpleDialogs\" component={SimpleDialogs} />\n        <Route path=\"/SimpleAppBar\" component={SimpleAppBar} />\n      </Router>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}